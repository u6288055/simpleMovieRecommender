import java.util.List;
import java.util.Map;

public interface BaseMovieRecommender {
	
	
	/**
	 * Parse movieFilename and stores the movie information in a Map data structure
	 * that maps mid to the corresponding Movie object. If the input is null, simply
	 * return null.
	 * Each line in the file "movieFilename" has one of the following formats:
	 * 
	 * 1. The movie title does not contain ','
	 * 
	 * <mid>,<title> (<year>),<tag_1>|<tag_2>|<tag_3>|...|<tag_n>
	 * For example: 2,Jumanji (1995),Adventure|Children|Fantasy
	 * 
	 * 2. The movie title contains ','
	 * <mid>,"<title> (<year>)",<tag_1>|<tag_2>|<tag_3>|...|<tag_n>
	 * For example: 11,"American President, The (1995)",Comedy|Drama|Romance
	 * 
	 * The information of each movie must be store in a Movie object.
	 * 
	 * Return a Map<Integer, Movie> object that is a mapping from movie_id -> the corresponding Movie object.
	 * 
	 * Hint: You may find it easier to parse each line using regular expressions,
	 * and each tag set using String.split()
	 * 
	 * Note: the first line of the movie file contains the header information. Ignore it.
	 * 
	 */
	public Map<Integer,Movie> loadMovies(String movieFilename);
	
	/**
	 * Parse the file "userFilename" which contains the information about movie ratings. 
	 * Each line in the file contains information about which user rates what movie, and when.
	 * 
	 * Each line in the file has the following format:
	 * 
	 * <uid>,<mid>,<rating>,<timestamp>
	 * For example: 1,256,0.5,1217895764
	 * 
	 * The information in each line must be stored in a Rating object.
	 * 
	 * Additionally, ratings associated with a user should be stored in the "ratings" object in the corresponding User object.
	 * 
	 * Return a Map<Integer, User> object that is a mapping from uid -> the corresponding User object.
	 * 
	 * If userFilename is null, just return null;
	 * 
	 * 
	 * Hint: In this case, String.split() may be less messier to use.
	 * 
	 * Note: the first line of the movie file contains the header information. Ignore it.
	 * 
	 * You may assume that this method is always called after loadMovies()
	 * 
	 */
	public Map<Integer, User> loadUsers(String ratingFilename);
	
	
	/**
	 * loadData() is called right after the recommender is instantiated. It loads the movies from "movieFilename"
	 * and users and ratings information from "ratingFilename", and store these pieces of information in the
	 * recommeder's internal memory. 
	 * 
	 * Specifically, this method makes calls to loadMovies(String movieFilename) and loadUsers(String ratingFilename) 
	 * respectively to parse and extract information from those input files.
	 * 
	 * @param movieFilename
	 * @param ratingFilename
	 */
	public  void loadData(String movieFilename, String userFilename);
	
	/**
	 * Return the reference to the Map<Integer, Movie> object, which stores the loaded movies.
	 * 
	 * If the movies have not been loaded, there is 0 movie in the data, return an empty Map.
	 * 
	 */
	public Map<Integer, Movie> getAllMovies();
	
	/**
	 * Return the reference to the Map<Integer, User> object, which stores the loaded users and their ratings.
	 * If the users/ratings have not been loaded, there is 0 rating in the data, return an empty Map.
	 * 
	 */
	public Map<Integer, User> getAllUsers();
	
	/**
	 * Compute the user similarity between each pair of users, and produces an output model file "modelFilename"
	 * With the following format:
	 * 
	 * @NUM_USERS <num_users>
	 * @USER_MAP {0=<user_id1>, 1=<user_id2>, 2=<user_id2>, ...}
	 * @NUM_MOVIES <num_movies>
	 * @MOVIE_MAP {0=<movie_id1>, 2=<movie_id2>, ...}	
	 * @RATING_MATRIX	//is a num_users X (num_movies+1) matrix. Each element RATING_MATRIX(i,j) is the rating
	 * //the user index i gives to the movie index j. For example (from test case "micro")
	 * 4.0 0.0 1.5 4.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.1666666666666665 
	 * 0.0 3.5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.5 
	 * 0.0 0.0 0.0 0.0 2.5 4.0 3.5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.3333333333333335 
	 * @USERSIM_MATRIX	//is a num_users X num_users matrix. Each element USERSIM_MATRIX(i,j) is the similarity
	 * //score between the user index i and the user index j. For example (from test case "micro")
	 * 1.0000000000000002 0.0 0.0 
	 * 0.0 0.0 0.0 
	 * 0.0 0.0 1.0000000000000002 
	 * 
	 * You may assume that loadData() is called prior to the invocation of this method.
	 */
	public  void trainModel(String modelFilename);
	
	/**
	 * Loads the model file generated by trainModel() into the recommender.
	 * @param modelFilename
	 */
	public  void loadModel(String modelFilename);
	
	/**
	 * Predicts the rating that the user "u" would give to the movie "m".
	 * The range of predicted rating must be [0,5.0] inclusive.
	 * You may assume that loadData() and loadModel() is called prior to the invocation of
	 * this method.
	 * 
	 * If u does not exist in the training file, simply return u.getMeanRating();
	 * @param m
	 * @param u
	 * @return
	 */
	public double predict(Movie m, User u);
	
	/**
	 * Compute the predicted ratings for all the movies produced during "fromYear" and "toYear", with respect to the user "u".
	 * Return the top K movies ranked by the the predicted ratings, represented by a List<MovieItem> object. 
	 * Note that a MovieItem object is used to hold the Movie object and its predicted rating. MovieItem is "Comparable"
	 * so you can call Collections.sort() on the list of such objects to sort them based on the predict ratings.  
	 * If the number of movies is fewer than K, simply return the ranked list of the movies.
	 * @param user
	 * @param fromYear
	 * @param toYear
	 * @param K
	 * @return
	 */
	public  List<MovieItem> recommend(User u, int fromYear, int toYear, int K);
	
}
